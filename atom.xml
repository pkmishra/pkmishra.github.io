<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pradeep Mishra]]></title>
  <link href="http://pkmishra.github.io/atom.xml" rel="self"/>
  <link href="http://pkmishra.github.io/"/>
  <updated>2013-12-10T20:59:58+05:30</updated>
  <id>http://pkmishra.github.io/</id>
  <author>
    <name><![CDATA[Pradeep Kumar Mishra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Twiscala: Twitter Clone in Scala]]></title>
    <link href="http://pkmishra.github.io/blog/2013/12/10/twiscala-twitter-clone-in-scala/"/>
    <updated>2013-12-10T18:58:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2013/12/10/twiscala-twitter-clone-in-scala</id>
    <content type="html"><![CDATA[<p>In this article I am going to talk about how to build a small twitter clone using Play Framework 2.1 , Scala as front end and Redis as backend. NetTuts+ has a very <a href="" title="http://net.tutsplus.com/tutorials/building-ribbit-in-scala/">good article</a> on the same topic with Mysql as backend and redis.io also has a <a href="" title="http://redis.io/topics/twitter-clone">case study</a> of building twitter clone using php as front end. However my motivation behind this post is to understand how data modelling in redis works . Since NetTuts+ already has a source code of frontend therefore I just treid to reuse the same.</p>

<!-- more -->


<p>Redis is an awesome and very popular k-v store or rather data structure store. Though k-v can be strings but Redis also supports data types like List, Set, OrderedList, SortedSet etc which makes it even more appealing.  To know more about redis visit <a href="" title="http://redis.io">redis.io</a> and to know about typical use case visit <a href="" title="http://highscalability.com/blog/2011/7/6/11-common-web-use-cases-solved-in-redis.html">common-web-use-cases-solved-in-redis</a>.
Coming from RDBMS background, takes a while in understanding the k-v store, specially data modelling.  Let&rsquo;s go step by step for twiscala app&hellip;</p>

<p>
User and Authentication

<figure class='code'><figcaption><span>Account.scala </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="nc">RedisDB</span><span class="o">.</span><span class="n">withClient</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">client</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="k">val</span> <span class="n">uid</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">incr</span><span class="o">(</span><span class="s">&quot;global:nextuid&quot;</span><span class="o">).</span><span class="n">get</span>
</span><span class='line'>          <span class="n">client</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&quot;uid:&quot;</span> <span class="o">+</span> <span class="n">uid</span> <span class="o">+</span> <span class="s">&quot;:email&quot;</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span>
</span><span class='line'>          <span class="n">client</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&quot;uid:&quot;</span> <span class="o">+</span> <span class="n">uid</span> <span class="o">+</span> <span class="s">&quot;:name&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>          <span class="n">client</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&quot;uid:&quot;</span> <span class="o">+</span> <span class="n">uid</span> <span class="o">+</span> <span class="s">&quot;:password&quot;</span><span class="o">,</span> <span class="nc">BCrypt</span><span class="o">.</span><span class="n">hashpw</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="nc">BCrypt</span><span class="o">.</span><span class="n">gensalt</span><span class="o">()))</span>
</span><span class='line'>          <span class="n">client</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&quot;email:&quot;</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="s">&quot;:uid&quot;</span><span class="o">,</span> <span class="n">uid</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

Here we are using global:nextuid key to get the next available value of uid (similar to auto increment pk value in rdbms) and later all the attributes are being set based on uid: :attribute based key so that if one has the uid , all the attributes are easily retreivable.
Last key in the code above has been set to make uid available by email id.
</p>


<p>
Ribbit (Tweets)

<figure class='code'><figcaption><span>Account.scala </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">RedisDB</span><span class="o">.</span><span class="n">withClient</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">client</span> <span class="k">=&gt;</span>
</span><span class='line'>            <span class="k">val</span> <span class="n">postId</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">incr</span><span class="o">(</span><span class="s">&quot;global:nextRibbitId&quot;</span><span class="o">).</span><span class="n">get</span>
</span><span class='line'>            <span class="n">println</span><span class="o">(</span><span class="n">postId</span><span class="o">)</span>
</span><span class='line'>           <span class="n">client</span><span class="o">.</span><span class="n">set</span><span class="o">(</span><span class="s">&quot;ribbit:&quot;</span> <span class="o">+</span> <span class="n">postId</span> <span class="o">+</span> <span class="s">&quot;:post&quot;</span><span class="o">,</span> <span class="n">sender</span><span class="o">.</span><span class="n">get</span> <span class="o">+</span> <span class="s">&quot;|&quot;</span> <span class="o">+</span> <span class="nc">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;|&quot;</span> <span class="o">+</span> <span class="n">content</span><span class="o">)</span>
</span><span class='line'>            <span class="k">val</span> <span class="n">account</span> <span class="k">=</span> <span class="nc">Account</span><span class="o">.</span><span class="n">findByEmail</span><span class="o">(</span><span class="n">sender</span><span class="o">.</span><span class="n">get</span><span class="o">).</span><span class="n">get</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">val</span> <span class="n">followers</span> <span class="k">=</span> <span class="n">client</span><span class="o">.</span><span class="n">smembers</span><span class="o">(</span><span class="s">&quot;uid:&quot;</span> <span class="o">+</span> <span class="n">account</span><span class="o">.</span><span class="n">id</span> <span class="o">+</span> <span class="s">&quot;:followers&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">followers</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">followers</span><span class="o">.</span><span class="n">isDefined</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="n">follower</span> <span class="k">&lt;-</span> <span class="n">followers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">client</span><span class="o">.</span><span class="n">lpush</span><span class="o">(</span><span class="s">&quot;uid:&quot;</span> <span class="o">+</span> <span class="n">follower</span> <span class="o">+</span> <span class="s">&quot;:posts&quot;</span><span class="o">,</span> <span class="n">postId</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">client</span><span class="o">.</span><span class="n">lpush</span><span class="o">(</span><span class="s">&quot;global:timeline&quot;</span><span class="o">,</span> <span class="n">postId</span><span class="o">)</span>
</span><span class='line'>              <span class="n">client</span><span class="o">.</span><span class="n">ltrim</span><span class="o">(</span><span class="s">&quot;global:timeline&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

 See carefully how ribbit key has bee constructed and how we are using List to keep all the ribbit  in order of the time , most recent to old.
</p>


<p>The application is just a POC to learn few  preliminary things about redis therefore I have not implemented functionality like followers and following. Sets  data structure can be used to keep track of followers and following people. For more detail do visit redis case study link given earlier. Entire source code of this application can be downloaded from <a href="" title="https://github.com/pkmishra/scala-playground/tree/master/twiscala">this location</a>. If you want to learn more about data modelling see <a href="" title="http://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/">nosql data modelling technique</a> Hopefully this will create  at least some curiosity about redis use cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology as Fashion]]></title>
    <link href="http://pkmishra.github.io/blog/2013/10/09/technology-as-fashion/"/>
    <updated>2013-10-09T11:36:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2013/10/09/technology-as-fashion</id>
    <content type="html"><![CDATA[<p>In today&rsquo;s world we are fortunate enough to have so many technologies, frameworks and open source projects to help us focus on solving business problems and build great products. There are certainly more than one options to solve any problem therefore it becomes equally important that technology to solve the problem is very well aligned with your business goals and maximizing the shareholder&rsquo;s returns.</p>

<!-- more -->


<p>My belief is that technology should be selected based on the business problem you are trying to solve and not the other way round where bunch of enthusiasts decide to use new cutting eadge technologies and thereafter try to fit what all problems can be solved using the selected technology. This certainly can not be in the best interest of the organization. I am not against innovation or experimenting with new set of technologies but one should not use new set of technologies because one wants to add new set of keywords in ones resume. One should also think about other cost e.g. maintenance, support and hiring. Let&rsquo;s look at some real world examples…</p>

<ol>
<li><p> An organization used cakePHP framework to build products. After a while a new manager is hired who is comfortable in codeIgniter so for new line of products he selects codeIgniter. Later the company hires another bright guy who likes to work in Laravel4 so Laravel was selected and so on. In this case personal choice and comfort is deciding the use of framework rather than what is in the best interest of the product and organization. What will happen over the period of time that you will not   I have seen similar things for other javascript frameworks as well.</p></li>
<li><p> Another example is the buzzword BigData. Big data and NoSql is in fashion today and people who are dealing with 500GB of data talk about using nosql solutions without having full understanding. I have seen many examples where postgresql/mysql can be used to handle the data volume but no we want hadoop!. Chris has summarized this in <a href="" title="http://www.chrisstucchio.com/blog/2013/hadoop_hatred.html">his blog</a> nicely.</p></li>
<li><p> And the last example is &ndash; worrying too much about scalability at the initial phase itself instead of making product valuable enough for the end user. Sometime it is good to cross the bridge when it comes.</p></li>
</ol>


<p>So what are the factors which affect technology selection?
There are no set rules but one rule must be taken care of i.e. Solve the business problem by using right set of technologies. Few other points which should be considered..</p>

<ol>
<li><p> What is the technology vision of the company?&ndash; If you are just supporting legacy system for some time and would like to move on to new product all together definitely you should explore usage of newer and widely accepted framework.</p></li>
<li><p> Talent and Knowledge &ndash; The most important asset of any organization is its people therefore if you already have experts in some area why not optimize that. e.g. If you already have rockstars in Python there is no need to develop app in PHP or in Asp.Net. Productivity will also be very high in this case.</p></li>
<li><p> Attracting new Talent &ndash;  If you are using very new technology you might not find good talent but again if your business problem requires to build a new high concurrent system and you already have java guys one should definitely try Scala/GoLang for new products.</p></li>
<li><p> Build smarter tool &amp; POC- When Facebook faced issues with php scalability they didn&rsquo;t migrate the whole code to different tech stack rather they created a new tool hiphop which compiles code into C++. Every company doesn&rsquo;t have the luxury of smart talent pool like Facebook but still some work around can be explored depending upon the situation. Creating prototypes/POCs are always helpful.</p></li>
<li><p> Remove obsolete tech &ndash; Organization should also innovate continuously and use newer but production ready technologies wherever possible. It also helps in attracting smart talent. Who wants to still work on asp?</p></li>
</ol>


<p>So in a big organization who should be accountable for technology convergence?</p>

<p>As I said there are no set rules to decide things, that&rsquo;s why the job of technology leader becomes critical. Depending upon organization size CTO/Chief Architect/VP Engineering is the person where the buck stops. He/She should make sure that engineers are focusing on solving the business problems and not using new technologies just because there is a buzz around it.</p>

<p>Comments/Feedbacks are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrapy: run using TOR and multiple agents Part 2]]></title>
    <link href="http://pkmishra.github.io/blog/2013/04/16/scrapy-run-using-tor-and-multiple-agents-part-2-ubuntu/"/>
    <updated>2013-04-16T21:22:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2013/04/16/scrapy-run-using-tor-and-multiple-agents-part-2-ubuntu</id>
    <content type="html"><![CDATA[<p>As discussed in <a href="" title="http://pkmishra.github.io/technical/2013/03/18/how-to-run-scrapy-with-TOR-and-multiple-browser-agents/">last post</a> this post is about running the same things on ubuntu. Again I am going to assume that you already have scrapy installed on your system. To install Tor</p>

<!-- more -->


<ul>
<li>Add tor repository to your ubuntu repository list (See <a href="" title="https://www.torproject.org/docs/debian.html.en#ubuntu">official documentation</a> for more detail)</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;deb  http://deb.torproject.org/torproject.org quantal main&quot;</span> | sudo tee -a /etc/apt/sources.list
</span></code></pre></td></tr></table></div></figure>


<p>  Here quantal is the release name for Ubuntu 12.10 release. If you are running any other version of ubuntu change it accordingly.
+ add gpg keys to sign the package</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gpg --keyserver keys.gnupg.net --recv 886DDD89
</span><span class='line'>gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | sudo apt-key add -
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now referesh the package and install tor</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt-get update
</span><span class='line'>apt-get install deb.torproject.org-keyring
</span><span class='line'>apt-get install tor
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install Polipo install using apt-get install polipo and change the configuration as described in last post. Everything else remains same i.e. by default polipo is using 8123 and Tor 9050 so you don&rsquo;t have to modify anything.</li>
<li>By default Tor and polipo will be installed as service. So after changing configuration you must restart polipo service</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>using sudo /etc/init.d/polipo restart
</span><span class='line'><span class="o">(</span>you can use same comand to start/stop both the services<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now check whether tor is working fine or not by running</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl --proxy http://localhost:8123 https://check.torproject.org/ | grep <span class="s2">&quot;Congratulations. Your browser is configured to use Tor&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see you will get this text displayed if everything is working. You are all set now.
Hope this helps</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrapy: run using TOR and multiple agents]]></title>
    <link href="http://pkmishra.github.io/blog/2013/03/18/how-to-run-scrapy-with-TOR-and-multiple-browser-agents-part-1-mac/"/>
    <updated>2013-03-18T20:02:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2013/03/18/how-to-run-scrapy-with-TOR-and-multiple-browser-agents-part-1-mac</id>
    <content type="html"><![CDATA[<p><a href="http://scrapy.org">Scrapy</a> is a brilliant and well documented crawler written in python. Though it is not as scalable as Apache Nutch but it can easily handle thousands of sites easily. You can get up and running very quickly using the official documentation.
<a href="https://www.torproject.org/">Tor</a> gives you power to keep your privacy and security.Tor can hide you so that website can not track your identity. You may read more about TOR in <a href="https://www.torproject.org/about/overview.html.en">official site</a>. However Tor only works for TCP streams and can be used by any application with SOCKS support.</p>

<!-- more -->


<p>When we combine Scrapy with Tor, we can have more control over our crawler privacy. We already know that Scrapy can work with proxy server however since Scrapy doesn&rsquo;t work directly with SOCKS proxy, things can work out if we can introduce a http proxy server as an intermediate between Scrapy and Tor which can also speak to Tor using SOCKS. SOCKS protocol is a lower level protocol than http and it is more transparent in a sense that it doesn&rsquo;t add extra info like http-header etc.  We are going to use a tiny and fast proxy server <a href="http://www.pps.univ-paris-diderot.fr/~jch/software/polipo">polipo</a>. Polipo can talk to Tor using SOCKS protocol therefore all three together can work to create anonymous crawler.
Alright let&rsquo;s get started.</p>

<ul>
<li>I am going to assume that you have already installed scrapy on your system.</li>
<li>Install Tor as per the instruction from <a href="https://www.torproject.org/docs/documentation.html.en">official documentation</a>. On my mac I used macport to install Tor.</li>
<li>Start tor</li>
<li>Install polipo using macport.</li>
<li>uncomment following lines in /etc/polipo/config or /opt/local/etc/polipo/config file. <br /></li>
</ul>


<figure class='code'><figcaption><span>build.sbt </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">socksParentProxy</span> <span class="o">=</span> localhost:9050
</span><span class='line'><span class="nv">diskCacheRoot</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">disableLocalInterface</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>start polipo.
By default polipo listens on 8123 port and Tor on 9050 port. If you want you may change this port and accordingly adjust settings in config files.</li>
</ul>


<p>Now to verify if everything is working fine
+ change your broser proxy setting to point to localhost and port 8123.
+ Visit <a href="https://check.torproject.org">this tor check page</a>. This page should give your message that you are using tor correctly depending upon if everything is configured correctly.</p>

<p>Now after basic setup is complete let&rsquo;s add middleware code in Scrapy to make use of this proxy.
+ Add a new file called middlewares.py in your project and add following code.<a href="https://gist.github.com/pkmishra/5193452">See this Gist</a></p>

<figure class='code'><figcaption><span>middlewares.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.conf</span> <span class="kn">import</span> <span class="n">settings</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RandomUserAgentMiddleware</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ua</span>  <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;USER_AGENT_LIST&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ua</span><span class="p">:</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;User-Agent&#39;</span><span class="p">,</span> <span class="n">ua</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ProxyMiddleware</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="n">meta</span><span class="p">[</span><span class="s">&#39;proxy&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;HTTP_PROXY&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>In settings.py add the code shown below. <a href="https://gist.github.com/pkmishra/5193452">See this Gist</a></li>
</ul>


<figure class='code'><figcaption><span>settings.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">### More comprehensive list can be found at </span>
</span><span class='line'><span class="c">### http://techpatterns.com/forums/about304.html</span>
</span><span class='line'><span class="n">USER_AGENT_LIST</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 </span>
</span><span class='line'>         <span class="p">(</span><span class="n">KHTML</span><span class="p">,</span> <span class="n">like</span> <span class="n">Gecko</span><span class="p">)</span> <span class="n">Chrome</span><span class="o">/</span><span class="mf">16.0</span><span class="o">.</span><span class="mf">912.36</span> <span class="n">Safari</span><span class="o">/</span><span class="mf">535.7</span><span class="s">&#39;,</span>
</span><span class='line'>    <span class="s">&#39;Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0) </span>
</span><span class='line'>       <span class="n">Gecko</span><span class="o">/</span><span class="mf">16.0</span> <span class="n">Firefox</span><span class="o">/</span><span class="mf">16.0</span><span class="s">&#39;,</span>
</span><span class='line'>    <span class="s">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 </span>
</span><span class='line'>       <span class="p">(</span><span class="n">KHTML</span><span class="p">,</span> <span class="n">like</span> <span class="n">Gecko</span><span class="p">)</span> <span class="n">Version</span><span class="o">/</span><span class="mf">5.1</span><span class="o">.</span><span class="mi">3</span> <span class="n">Safari</span><span class="o">/</span><span class="mf">534.53</span><span class="o">.</span><span class="mi">10</span><span class="s">&#39;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">HTTP_PROXY</span> <span class="o">=</span> <span class="s">&#39;http://127.0.0.1:8123&#39;</span>
</span><span class='line'><span class="n">DOWNLOADER_MIDDLEWARES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>     <span class="s">&#39;myproject.middlewares.RandomUserAgentMiddleware&#39;</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&#39;myproject.middlewares.ProxyMiddleware&#39;</span><span class="p">:</span> <span class="mi">410</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&#39;scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware&#39;</span><span class="p">:</span> <span class="bp">None</span>
</span><span class='line'>    <span class="c"># Disable compression middleware, so the actual HTML pages are cached</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You are all set to crawl now.
<b>Make sure you use the crawler responsibly with sufficient delay and follow the website terms and conditions along with robots.txt rules.</b></p>

<p>Next time I am going to setup things on ubuntu and accordingly I will update this article.
Hope this helps!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala, SBT and IntellijIdea boilerplate]]></title>
    <link href="http://pkmishra.github.io/blog/2013/01/16/scala-sbt-and-intellijidea-boilerplate/"/>
    <updated>2013-01-16T23:33:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2013/01/16/scala-sbt-and-intellijidea-boilerplate</id>
    <content type="html"><![CDATA[<p>As I started delving into facets of Scala language I spent a lot of time in figuring out various tools for better productivity. Finally I was up and running with the basic setup though after lots of efforts. Therefore I am writing this post to help other newbies in setting up the basic project structure so that one may start being productive immediately. Before starting on how to setup things, please make sure you have <br />
1. <a href="" title="https://github.com/n8han/giter8">giter8</a> installed. If you are using typesafe stack like me you will have it as typesafe-stack-folder/bin/g8. <br />
2. sbt 0.12.1 installed.</p>

<!-- more -->


<p>Please note that sbt0.12 doesn&rsquo;t support scala 2.10 therefore this help is for those who wants to set up sbt 0.12 with scala 2.10. <br />
Alright let the fun begin now&hellip;<br />
+ run following command to download the template project <br />
<code>g8 pkmishra/scala-sbt-idea-boilerplate.g8</code> <br />
This will prompt you to give values to variables like project <code>name</code>, <code>organization</code>, <code>version</code> and <code>scalaVersion</code>. You may also select the default values. The template project is located at <a href="https://github.com/pkmishra/scala-sbt-idea-boilerplate.g8">scala-sbt-idea-boilerplate</a> <br />
+ make directory called ~/.sbt/plugins and created file build.sbt if it doesn&rsquo;t exist already. <br/>
+ Write following lines to this build.sbt file so that sbt-idea plugin may be downloaded which is going to be used later&hellip; <br /></p>

<p>

<figure class='code'><figcaption><span>build.sbt </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">sbt._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Defaults._</span>
</span><span class='line'>
</span><span class='line'><span class="n">resolvers</span> <span class="o">+=</span> <span class="s">&quot;Sonatype snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;http://oss.sonatype.org/content/repositories/snapshots/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="n">sbtPluginExtra</span><span class="o">(</span>
</span><span class='line'>   <span class="n">m</span> <span class="k">=</span> <span class="s">&quot;com.github.mpeltonen&quot;</span> <span class="o">%</span> <span class="s">&quot;sbt-idea&quot;</span> <span class="o">%</span> <span class="s">&quot;1.3.0-SNAPSHOT&quot;</span><span class="o">,</span> <span class="c1">// Plugin module name and version</span>
</span><span class='line'>   <span class="n">sbtV</span> <span class="k">=</span> <span class="s">&quot;0.12&quot;</span><span class="o">,</span>    <span class="c1">// SBT version</span>
</span><span class='line'>   <span class="n">scalaV</span> <span class="k">=</span> <span class="s">&quot;2.9.2&quot;</span>    <span class="c1">// Scala version compiled the plugin</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

</p>


<ul>
<li>Now go to the root of the project you have generated (e.g. if you have keep it default name should be basic-project) and run following command.<br />
sbt &ldquo;gen-idea no-sbt-build-module&rdquo; <br />
This will generate all the idea project files. <br /></li>
<li>Boom!! now you can open Idea IDE and open the project. To see the output just run command sbt run.</li>
<li><em>Make sure to run following command everytime you add/remove a new dependency in your project build.sbt file.</em> <br />
sbt &ldquo;gen-idea no-sbt-build-module&rdquo; <br />
This will keep everything upto date and you won&rsquo;t get any compilation error in Intellij Idea. Hope this helps!!!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linq to Sql: Dynamic Sorting without using Complete Dynamic Linq Libraries]]></title>
    <link href="http://pkmishra.github.io/blog/2008/04/13/linq-to-sql-dynamic-sorting-without-using-complete-dynamic-linq-libraries/"/>
    <updated>2008-04-13T23:11:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2008/04/13/linq-to-sql-dynamic-sorting-without-using-complete-dynamic-linq-libraries</id>
    <content type="html"><![CDATA[<p>This problem may occur while implementing sorting in GridView. If a storedprocedure is being used either dynamic sql can be created or multiple of case statements can be used. However what if you are just using linq queries. Here are the options</p>

<p>Using Dynamic Linq
Some work arround so that linq query can be generated at runtime.
Essentially 2nd approach is the same as that used in 1st one. But if you just want to implement sorting and do not want to digg into Dynamic Linq libraries you can follow the article…</p>

<!-- more -->


<p>Let’s assume following method expects sortExpression parameter directly passed by UI layer GridView.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">DataTable</span> <span class="nf">GetSomeData</span><span class="p">(</span><span class="n">par1</span><span class="p">,</span> <span class="n">par2</span><span class="err">…</span><span class="p">.,</span> <span class="kt">string</span> <span class="n">sortExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="c1">//Linq query goes here )</span>
</span><span class='line'>    <span class="c1">// We want something like this which is not possible as of now</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="n">some</span> <span class="n">query</span><span class="p">)</span> <span class="p">(</span><span class="n">OrderBy</span> <span class="n">SortExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Here</span> <span class="k">is</span> <span class="n">the</span> <span class="n">extension</span> <span class="n">method</span> <span class="n">you</span> <span class="n">would</span> <span class="n">like</span> <span class="n">to</span> <span class="n">follow</span><span class="err">…</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">DataTable</span> <span class="nf">GetSomeData</span><span class="p">(</span><span class="n">par1</span><span class="p">,</span> <span class="n">par2</span><span class="err">…</span><span class="p">.,</span> <span class="kt">string</span> <span class="n">sortExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="c1">//Linq query goes here )</span>
</span><span class='line'>    <span class="c1">// We want something like this which is not possible as of now</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="n">some</span> <span class="n">query</span><span class="p">)</span> <span class="p">(</span><span class="n">OrderBy</span> <span class="n">SortExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Util</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Thanks to Ernesto for pointing out a small correction in method signature.</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">IQueryable</span> <span class="nf">OrderBy</span><span class="p">(</span><span class="k">this</span> <span class="n">IQueryable</span> <span class="n">source</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sortExpression</span><span class="p">)</span> <span class="k">where</span> <span class="n">TEntity</span> <span class="p">:</span> <span class="k">class</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TEntity</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Remember that for ascending order GridView just returns the column name and for descending it returns column name followed by DESC keyword</span>
</span><span class='line'>    <span class="c1">// Therefore we need to examine the sortExpression and separate out Column Name and order (ASC/DESC)</span>
</span><span class='line'>    <span class="kt">string</span><span class="p">[]</span> <span class="n">expressionParts</span> <span class="p">=</span> <span class="n">sortExpression</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="err">‘</span> <span class="err">‘</span><span class="p">);</span> <span class="c1">// Assuming sortExpression is like [ColoumnName DESC] or [ColumnName]</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">orderByProperty</span> <span class="p">=</span> <span class="n">expressionParts</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">sortDirection</span> <span class="p">=</span> <span class="err">“</span><span class="n">ASC</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">methodName</span> <span class="p">=</span> <span class="err">“</span><span class="n">OrderBy</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//if sortDirection is descending</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">expressionParts</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">1</span> <span class="p">&amp;&amp;</span> <span class="n">expressionParts</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="err">“</span><span class="n">DESC</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">sortDirection</span> <span class="p">=</span> <span class="err">“</span><span class="n">Descending</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>        <span class="n">methodName</span> <span class="p">+=</span> <span class="n">sortDirection</span><span class="p">;</span> <span class="c1">// Add sort direction at the end of Method name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">property</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="n">orderByProperty</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">parameter</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="err">“</span><span class="n">p</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">propertyAccess</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">MakeMemberAccess</span><span class="p">(</span><span class="n">parameter</span><span class="p">,</span> <span class="n">property</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">orderByExp</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Lambda</span><span class="p">(</span><span class="n">propertyAccess</span><span class="p">,</span> <span class="n">parameter</span><span class="p">);</span>
</span><span class='line'>    <span class="n">MethodCallExpression</span> <span class="n">resultExp</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Call</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Queryable</span><span class="p">),</span> <span class="n">methodName</span><span class="p">,</span>
</span><span class='line'>    <span class="k">new</span> <span class="n">Type</span><span class="p">[]</span> <span class="p">{</span> <span class="n">type</span><span class="p">,</span> <span class="n">property</span><span class="p">.</span><span class="n">PropertyType</span> <span class="p">},</span>
</span><span class='line'>    <span class="n">source</span><span class="p">.</span><span class="n">Expression</span><span class="p">,</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Quote</span><span class="p">(</span><span class="n">orderByExp</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="p">.</span><span class="n">Provider</span><span class="p">.</span><span class="n">CreateQuery</span><span class="p">(</span><span class="n">resultExp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Usage will be as of follows…</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">DataTable</span> <span class="nf">GetSomeData</span><span class="p">(</span><span class="n">par1</span><span class="p">,</span> <span class="n">par2</span><span class="err">…</span><span class="p">.,</span> <span class="kt">string</span> <span class="n">sortExpression</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="c1">//Linq query goes here )</span>
</span><span class='line'><span class="c1">// We want something like this which is not possible as of now</span>
</span><span class='line'><span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="n">some</span> <span class="n">query</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">query</span><span class="p">.</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">SortExpression</span><span class="p">).</span><span class="n">ToDataTable</span><span class="p">(</span><span class="n">rec</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="n">query</span><span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again OrderBy is an extension method. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to show google mail like loading image/please wait… message while page data loads]]></title>
    <link href="http://pkmishra.github.io/blog/2008/04/13/how-to-show-google-mail-like-loading-image-please-wait-message-while-page-data-loads/"/>
    <updated>2008-04-13T23:11:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2008/04/13/how-to-show-google-mail-like-loading-image-please-wait-message-while-page-data-loads</id>
    <content type="html"><![CDATA[<p>For a better user experience you would your users to see please wait message while browser render the page completely. Here is the one solution to the same problem.</p>

<p>Let’s create a master page called Site.master and a web content form as demo.aspx.</p>

<!-- more -->




<figure class='code'><figcaption><span>DemoObject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;title&gt;</span>Loading Demo<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Page Header will go here... --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                                            <span class="c">&lt;!-- Page-specific content will go here... --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Page Footer will go here... --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demo.aspx is the web content form which fetches data from a database.
To show loading message add following code to the code behind of master file Site.master.cs</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnLoad</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(!</span><span class="n">IsPostBack</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">Buffer</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">”</span> <span class="n">Please</span> <span class="n">wait</span><span class="err">…“</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">base</span><span class="p">.</span><span class="n">OnLoad</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Render</span><span class="p">(</span><span class="n">HtmlTextWriter</span> <span class="n">writer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(!</span><span class="n">IsPostBack</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">ClearContent</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">base</span><span class="p">.</span><span class="n">Render</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the Site.master.aspx file add following javascript at the end of the file.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="k">try</span><span class="p">{</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">divLoadingMessage</span> <span class="o">=</span>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;divLoadingMsg&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nx">divLoadingMessage</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">divLoadingMessage</span><span class="p">)</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">divLoadingMessage</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span><span class="o">=</span><span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">divLoadingMessage</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">divLoadingMessage</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it now all your pages using Site.master will be showing Please wait.. message when the page starts loading. Of course instead of putting a message you can put a nice web2.0 loading image in between divLoadingMsg tags.
So how does it work?
The onLoad event of master page will be called before any of the content web form’s Onload event. as soon as master page loads div tag becomes visible. After the page has loaded completely the script written at the end of the master page hides the div tag. so simple isnt’t it.Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution to Error: The data source ‘ods_DataSource’ does not support sorting with IEnumerable data]]></title>
    <link href="http://pkmishra.github.io/blog/2008/03/01/solution-ods_DataSource-does-not-support-sorting-with-ienumerable-data/"/>
    <updated>2008-03-01T20:22:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2008/03/01/solution-ods_DataSource-does-not-support-sorting-with-ienumerable-data</id>
    <content type="html"><![CDATA[<p>Suppose you have a grid view and associated datasource as ods_DataSource. The select method is defined as</p>

<figure class='code'><figcaption><span>DemoObject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">ISingleResult</span> <span class="nf">SelectMethod</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//Get DAL Instance DALInstance</span>
</span><span class='line'><span class="k">return</span> <span class="n">DALInstance</span><span class="p">.</span><span class="n">GetDATA</span><span class="p">(){}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Now if you try to sort on some column the following error pops up.The data source ‘ods_DataSource’ does not support sorting with IEnumerable data. Automatic sorting is only supported with DataView, DataTable, and DataSet.This is because to implement sorting you must have datasource of type DataView/DataTable/DataSet. Now if you are using traditional 3 tier architecture and returning one of these three datatypes everything works fine. The problem arises when you are using Linq. There are two possible solution for this..</p>

<ul>
<li>Implement custom sorting.</li>
<li>Change IEnumerable datatype into one of these datatypes.</li>
</ul>


<p>Here we will try to follow 2nd approach. In our data access layer we will change IEnumerable into a DataTable using an static utility class. Here is the code to perform that operation</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Util</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">DataTable</span> <span class="nf">ToDataTable</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span> <span class="n">varlist</span><span class="p">,</span> <span class="n">CreateRowDelegate</span> <span class="n">fn</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">DataTable</span> <span class="n">dtReturn</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DataTable</span><span class="p">();</span>
</span><span class='line'><span class="c1">// column names</span>
</span><span class='line'><span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">oProps</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Could add a check to verify that there is an element 0</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="n">T</span> <span class="n">rec</span> <span class="k">in</span> <span class="n">varlist</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// Use reflection to get property names, to create table, Only first time, others will follow</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">oProps</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">oProps</span> <span class="p">=</span> <span class="p">((</span><span class="n">Type</span><span class="p">)</span><span class="n">rec</span><span class="p">.</span><span class="n">GetType</span><span class="p">()).</span><span class="n">GetProperties</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">pi</span> <span class="k">in</span> <span class="n">oProps</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// Note that we must check a nullable type else method will throw and error</span>
</span><span class='line'><span class="n">Type</span> <span class="n">colType</span> <span class="p">=</span> <span class="n">pi</span><span class="p">.</span><span class="n">PropertyType</span><span class="p">;</span> <span class="k">if</span> <span class="p">((</span><span class="n">colType</span><span class="p">.</span><span class="n">IsGenericType</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">colType</span><span class="p">.</span><span class="n">GetGenericTypeDefinition</span><span class="p">()</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Nullable</span><span class="p">)))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// Since all the elements have same type you can just take the first element and get type</span>
</span><span class='line'><span class="n">colType</span> <span class="p">=</span> <span class="n">colType</span><span class="p">.</span><span class="n">GetGenericArguments</span><span class="p">()[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">dtReturn</span><span class="p">.</span><span class="n">Columns</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">DataColumn</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">colType</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">DataRow</span> <span class="n">dr</span> <span class="p">=</span> <span class="n">dtReturn</span><span class="p">.</span><span class="n">NewRow</span><span class="p">();</span>
</span><span class='line'><span class="c1">//Iterate through each property in PropertyInfo</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">pi</span> <span class="k">in</span> <span class="n">oProps</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// Handle null values accordingly</span>
</span><span class='line'><span class="n">dr</span><span class="p">[</span><span class="n">pi</span><span class="p">.</span><span class="n">Name</span><span class="p">]</span> <span class="p">=</span> <span class="n">pi</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">rec</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">:</span> <span class="n">pi</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">rec</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">dtReturn</span><span class="p">.</span><span class="n">Rows</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">dr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">dtReturn</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="kt">object</span><span class="p">[]</span> <span class="nf">CreateRowDelegate</span><span class="p">(</span><span class="n">T</span> <span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Changes</span> <span class="k">in</span> <span class="n">the</span> <span class="n">Select</span> <span class="n">method</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">ISingleResult</span> <span class="nf">SelectMethod</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//Get DAL Instance DALInstance</span>
</span><span class='line'><span class="k">return</span> <span class="n">DALInstance</span><span class="p">.</span><span class="n">GetSomeData</span><span class="p">(){}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="n">DataTable</span> <span class="nf">GetSomeData</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">ISingle</span> <span class="n">result</span> <span class="p">=</span> <span class="c1">//code to get result;</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">ToDataTable</span><span class="p">(</span><span class="n">rec</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="n">result</span><span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see ToDataTable is an extenstion method and will be available to all IEnumerable types.Obviously there are some performance overhead due to use of reflection but still this approach can be used. However for real time applications performance testing must be performed.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Check if DataReader has certain field]]></title>
    <link href="http://pkmishra.github.io/blog/2008/03/01/how-to-check-if-datareader-has-field/"/>
    <updated>2008-03-01T20:22:00+05:30</updated>
    <id>http://pkmishra.github.io/blog/2008/03/01/how-to-check-if-datareader-has-field</id>
    <content type="html"><![CDATA[<p>During development I encountered this problem. So here I am posting a solution for the same.
Suppose a reader is reading result set which normally returns fields ‘A’ ‘ B’ AND ‘C’ and in some cases it also returns ‘W’.So your dataread method is likeLet’s have some object for the data to persist.</p>

<!-- more -->




<figure class='code'><figcaption><span>DemoObject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Public</span> <span class="n">Object</span> <span class="n">DemoObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//string Property A</span>
</span><span class='line'><span class="c1">//string Property B</span>
</span><span class='line'><span class="c1">//string Property C</span>
</span><span class='line'><span class="c1">//string Property W</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Constructor</span>
</span><span class='line'><span class="n">Object</span><span class="p">(</span><span class="kt">string</span> <span class="n">a</span><span class="p">,</span> <span class="kt">string</span> <span class="n">b</span><span class="p">,</span> <span class="kt">string</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">A</span> <span class="p">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">B</span> <span class="p">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">C</span> <span class="p">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="n">W</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Object</span><span class="p">(</span><span class="kt">string</span> <span class="n">a</span><span class="p">,</span> <span class="kt">string</span> <span class="n">b</span><span class="p">,</span> <span class="kt">string</span> <span class="n">c</span><span class="p">,</span> <span class="kt">string</span> <span class="n">w</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">A</span> <span class="p">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">B</span> <span class="p">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="n">C</span> <span class="p">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="n">W</span> <span class="p">=</span> <span class="n">w</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">DemoObject</span> <span class="nf">DataRead</span><span class="p">(</span><span class="n">SqlDataReader</span> <span class="n">reader</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//Some Code</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="n">returns</span> <span class="kt">object</span> <span class="k">as</span> <span class="n">Object</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">Object</span> <span class="nf">DataRead</span><span class="p">(</span><span class="n">SqlDataReader</span> <span class="n">reader</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//Some Code</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">a</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">b</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">c</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">C</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Following line of code throws IndexOutOfRangeException</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;W&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">w</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">W</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Some Code</span>
</span><span class='line'><span class="c1">//……</span>
</span><span class='line'>
</span><span class='line'><span class="n">returns</span> <span class="k">new</span> <span class="nf">DemoObject</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It has the GetOrdinal() method as well, but it throws an exception if the reader doesn’t contain the field
So the solution is to use GetSchemaTable. It returns a table holding the schema of the reader. There is one row in the table for each column returned in the reader, and the columns of the schema table define properties of the reader’s result set, such as the column name, size, data type and so on. We need to filter the rows in that table to just the row matching the column we want, theschema table holds 1 row per column. The easiest way to do this is with the default view. e.g. if I were looking for a row called “myrow” in a reader’s results, I could do this</p>

<figure class='code'><figcaption><span>DemoObject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">DataView</span> <span class="n">myView</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetSchemaTable</span><span class="p">().</span><span class="n">DefaultView</span><span class="p">;</span><span class="n">myView</span><span class="p">.</span><span class="n">RowFilter</span> <span class="p">=</span> <span class="err">“</span><span class="n">ColumnName</span> <span class="p">=</span> <span class="err">‘</span><span class="n">myrow</span><span class="err">’</span> <span class="err">“</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So final set of code is</p>

<figure class='code'><figcaption><span>DemoObject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">//Create a method which verifies if a column exists in a particular row being read by datareader</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="kt">bool</span> <span class="nf">ColumnExists</span><span class="p">(</span><span class="n">SqlDataReader</span> <span class="n">reader</span><span class="p">,</span> <span class="kt">string</span> <span class="n">columnName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">reader</span><span class="p">.</span><span class="n">GetSchemaTable</span><span class="p">().</span><span class="n">DefaultView</span><span class="p">.</span><span class="n">RowFilter</span> <span class="p">=</span> <span class="err">“</span><span class="n">ColumnName</span><span class="p">=</span> <span class="err">‘”</span> <span class="p">+</span> <span class="n">columnName</span> <span class="p">+</span> <span class="err">“‘”</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="n">GetSchemaTable</span><span class="p">().</span><span class="n">DefaultView</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">So</span> <span class="n">now</span> <span class="n">ReadData</span> <span class="n">method</span> <span class="n">will</span> <span class="n">look</span> <span class="n">like</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="n">Object</span> <span class="nf">DataRead</span><span class="p">(</span><span class="n">SqlDataReader</span> <span class="n">reader</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//Some Code</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">a</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">A</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">b</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">B</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">c</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">C</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Check only those columns where you have doubts</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">ColumnExists</span><span class="p">(</span><span class="n">reader</span><span class="p">,</span> <span class="err">“</span><span class="n">W</span><span class="err">”</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">reader</span><span class="p">[</span><span class="s">&quot;W&quot;</span><span class="p">]!=</span><span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="kt">string</span> <span class="n">w</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="err">“</span><span class="n">W</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Some Code</span>
</span><span class='line'><span class="c1">//……</span>
</span><span class='line'>
</span><span class='line'><span class="n">returns</span> <span class="k">new</span> <span class="nf">DemoObject</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
